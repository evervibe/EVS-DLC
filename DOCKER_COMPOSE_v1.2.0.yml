# EVS-DLC Production Infrastructure - v1.2.0
# Complete stack: MySQL, Redis, API, Web Admin

version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: evs-dlc-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-secret}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-db_game}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./DB/game/servers/dev:/docker-entrypoint-initdb.d:ro
    command: [
      "mysqld",
      "--max_allowed_packet=1G",
      "--net_read_timeout=600",
      "--net_write_timeout=600",
      "--connect_timeout=60",
      "--wait_timeout=28800",
      "--interactive_timeout=28800"
    ]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${MYSQL_ROOT_PASSWORD:-secret}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - evs-dlc-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: evs-dlc-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - evs-dlc-network

  # DLC API Backend
  api:
    build:
      context: ../tools/apps/dlc-api
      dockerfile: Dockerfile
    container_name: evs-dlc-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      API_PORT: ${API_PORT:-30089}
      DB_AUTH_HOST: mysql
      DB_AUTH_PORT: 3306
      DB_AUTH_USER: ${DB_USER:-root}
      DB_AUTH_PASS: ${DB_PASSWORD:-secret}
      DB_AUTH_NAME: ${DB_AUTH_NAME:-db_auth}
      DB_GAME_HOST: mysql
      DB_GAME_PORT: 3306
      DB_GAME_USER: ${DB_USER:-root}
      DB_GAME_PASS: ${DB_PASSWORD:-secret}
      DB_GAME_NAME: ${DB_GAME_NAME:-db_game}
      DB_DATA_HOST: mysql
      DB_DATA_PORT: 3306
      DB_DATA_USER: ${DB_USER:-root}
      DB_DATA_PASS: ${DB_PASSWORD:-secret}
      DB_DATA_NAME: ${DB_DATA_NAME:-db_data}
      DB_POST_HOST: mysql
      DB_POST_PORT: 3306
      DB_POST_USER: ${DB_USER:-root}
      DB_POST_PASS: ${DB_PASSWORD:-secret}
      DB_POST_NAME: ${DB_POST_NAME:-db_post}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:?JWT_SECRET must be set in environment}
    ports:
      - "${API_PORT:-30089}:30089"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:30089/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - evs-dlc-network

  # DLC Web Admin Frontend
  web:
    build:
      context: ../tools/apps/dlc-web-admin
      dockerfile: Dockerfile
    container_name: evs-dlc-web
    environment:
      # Note: NEXT_PUBLIC_* variables must be set at build time for client-side access
      # For production, build the image with proper API URL or use runtime configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:30089}
      NEXT_PUBLIC_APP_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_APP_VERSION: 1.2.0
    ports:
      - "${WEB_PORT:-5174}:5174"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5174"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - evs-dlc-network

  # Adminer Database UI
  adminer:
    image: adminer:4
    container_name: evs-dlc-adminer
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      - mysql
    networks:
      - evs-dlc-network

volumes:
  mysql-data:
    name: evs-dlc-mysql-data
  redis-data:
    name: evs-dlc-redis-data

networks:
  evs-dlc-network:
    name: evs-dlc-network
    driver: bridge
